/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.apside.gismo.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.apside.gismo.domain.GismoImputation;
import com.apside.gismo.domain.GismoImputation_;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.GismoImputationRepository;

/**
 * A simple DTO Facility for GismoImputation.
 */
@Service
public class GismoImputationDTOService {

    @Inject
    private GismoImputationRepository gismoImputationRepository;

    @Transactional(readOnly = true)
    public GismoImputationDTO findOne(Integer id) {
        return toDTO(gismoImputationRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<GismoImputationDTO> complete(String query, int maxResults) {
        List<GismoImputation> results = gismoImputationRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<GismoImputationDTO> findAll(PageRequestByExample<GismoImputationDTO> req) {
        Example<GismoImputation> example = null;
        GismoImputation gismoImputation = toEntity(req.example);

        if (gismoImputation != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(GismoImputation_.detail.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(GismoImputation_.warning.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(GismoImputation_.error.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(gismoImputation, matcher);
        }

        Page<GismoImputation> page;
        if (example != null) {
            page = gismoImputationRepository.findAll(example, req.toPageable());
        } else {
            page = gismoImputationRepository.findAll(req.toPageable());
        }

        List<GismoImputationDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public GismoImputationDTO save(GismoImputationDTO dto) {
        if (dto == null) {
            return null;
        }

        final GismoImputation gismoImputation;

        if (dto.isIdSet()) {
            GismoImputation gismoImputationTmp = gismoImputationRepository.findOne(dto.id);
            if (gismoImputationTmp != null) {
                gismoImputation = gismoImputationTmp;
            } else {
                gismoImputation = new GismoImputation();
                gismoImputation.setId(dto.id);
            }
        } else {
            gismoImputation = new GismoImputation();
        }

        gismoImputation.setTaskId(dto.taskId);

        gismoImputation.setUserId(dto.userId);

        gismoImputation.setImputdate(dto.imputdate);

        gismoImputation.setImputtime(dto.imputtime);

        gismoImputation.setDetail(dto.detail);

        gismoImputation.setWeeknumberid(dto.weeknumberid);

        gismoImputation.setWarning(dto.warning);

        gismoImputation.setError(dto.error);

        return toDTO(gismoImputationRepository.save(gismoImputation));
    }

    /**
     * Converts the passed gismoImputation to a DTO.
     */
    public GismoImputationDTO toDTO(GismoImputation gismoImputation) {
        return toDTO(gismoImputation, 1);
    }

    /**
     * Converts the passed gismoImputation to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param gismoImputation
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public GismoImputationDTO toDTO(GismoImputation gismoImputation, int depth) {
        if (gismoImputation == null) {
            return null;
        }

        GismoImputationDTO dto = new GismoImputationDTO();

        dto.id = gismoImputation.getId();
        dto.taskId = gismoImputation.getTaskId();
        dto.userId = gismoImputation.getUserId();
        dto.imputdate = gismoImputation.getImputdate();
        dto.imputtime = gismoImputation.getImputtime();
        dto.detail = gismoImputation.getDetail();
        dto.weeknumberid = gismoImputation.getWeeknumberid();
        dto.warning = gismoImputation.getWarning();
        dto.error = gismoImputation.getError();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a GismoImputation.
     * Convenient for query by example.
     */
    public GismoImputation toEntity(GismoImputationDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a GismoImputation.
     * Convenient for query by example.
     */
    public GismoImputation toEntity(GismoImputationDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        GismoImputation gismoImputation = new GismoImputation();

        gismoImputation.setId(dto.id);
        gismoImputation.setTaskId(dto.taskId);
        gismoImputation.setUserId(dto.userId);
        gismoImputation.setImputdate(dto.imputdate);
        gismoImputation.setImputtime(dto.imputtime);
        gismoImputation.setDetail(dto.detail);
        gismoImputation.setWeeknumberid(dto.weeknumberid);
        gismoImputation.setWarning(dto.warning);
        gismoImputation.setError(dto.error);
        if (depth-- > 0) {
        }

        return gismoImputation;
    }
}