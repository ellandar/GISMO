/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.apside.gismo.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.apside.gismo.domain.Profil;
import com.apside.gismo.domain.Profil_;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.ProfilRepository;

/**
 * A simple DTO Facility for Profil.
 */
@Service
public class ProfilDTOService {

    @Inject
    private ProfilRepository profilRepository;

    @Transactional(readOnly = true)
    public ProfilDTO findOne(Integer id) {
        return toDTO(profilRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<ProfilDTO> complete(String query, int maxResults) {
        List<Profil> results = profilRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<ProfilDTO> findAll(PageRequestByExample<ProfilDTO> req) {
        Example<Profil> example = null;
        Profil profil = toEntity(req.example);

        if (profil != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
            ;

            example = Example.of(profil, matcher);
        }

        Page<Profil> page;
        if (example != null) {
            page = profilRepository.findAll(example, req.toPageable());
        } else {
            page = profilRepository.findAll(req.toPageable());
        }

        List<ProfilDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public ProfilDTO save(ProfilDTO dto) {
        if (dto == null) {
            return null;
        }

        final Profil profil;

        if (dto.isIdSet()) {
            Profil profilTmp = profilRepository.findOne(dto.id);
            if (profilTmp != null) {
                profil = profilTmp;
            } else {
                profil = new Profil();
                profil.setId(dto.id);
            }
        } else {
            profil = new Profil();
        }

        profil.setType(dto.type);

        profil.setUserId(dto.userId);

        profil.setProjectGroupId(dto.projectGroupId);

        profil.setProjectId(dto.projectId);

        return toDTO(profilRepository.save(profil));
    }

    /**
     * Converts the passed profil to a DTO.
     */
    public ProfilDTO toDTO(Profil profil) {
        return toDTO(profil, 1);
    }

    /**
     * Converts the passed profil to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param profil
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public ProfilDTO toDTO(Profil profil, int depth) {
        if (profil == null) {
            return null;
        }

        ProfilDTO dto = new ProfilDTO();

        dto.id = profil.getId();
        dto.type = profil.getType();
        dto.userId = profil.getUserId();
        dto.projectGroupId = profil.getProjectGroupId();
        dto.projectId = profil.getProjectId();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Profil.
     * Convenient for query by example.
     */
    public Profil toEntity(ProfilDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Profil.
     * Convenient for query by example.
     */
    public Profil toEntity(ProfilDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Profil profil = new Profil();

        profil.setId(dto.id);
        profil.setType(dto.type);
        profil.setUserId(dto.userId);
        profil.setProjectGroupId(dto.projectGroupId);
        profil.setProjectId(dto.projectId);
        if (depth-- > 0) {
        }

        return profil;
    }
}