/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.apside.gismo.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.apside.gismo.domain.SubVersion;
import com.apside.gismo.domain.SubVersion_;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.SubVersionRepository;

/**
 * A simple DTO Facility for SubVersion.
 */
@Service
public class SubVersionDTOService {

    @Inject
    private SubVersionRepository subVersionRepository;

    @Transactional(readOnly = true)
    public SubVersionDTO findOne(Integer id) {
        return toDTO(subVersionRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<SubVersionDTO> complete(String query, int maxResults) {
        List<SubVersion> results = subVersionRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<SubVersionDTO> findAll(PageRequestByExample<SubVersionDTO> req) {
        Example<SubVersion> example = null;
        SubVersion subVersion = toEntity(req.example);

        if (subVersion != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(SubVersion_.name.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(subVersion, matcher);
        }

        Page<SubVersion> page;
        if (example != null) {
            page = subVersionRepository.findAll(example, req.toPageable());
        } else {
            page = subVersionRepository.findAll(req.toPageable());
        }

        List<SubVersionDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public SubVersionDTO save(SubVersionDTO dto) {
        if (dto == null) {
            return null;
        }

        final SubVersion subVersion;

        if (dto.isIdSet()) {
            SubVersion subVersionTmp = subVersionRepository.findOne(dto.id);
            if (subVersionTmp != null) {
                subVersion = subVersionTmp;
            } else {
                subVersion = new SubVersion();
                subVersion.setId(dto.id);
            }
        } else {
            subVersion = new SubVersion();
        }

        subVersion.setName(dto.name);

        subVersion.setSubProjectId(dto.subProjectId);

        subVersion.setVersionId(dto.versionId);

        return toDTO(subVersionRepository.save(subVersion));
    }

    /**
     * Converts the passed subVersion to a DTO.
     */
    public SubVersionDTO toDTO(SubVersion subVersion) {
        return toDTO(subVersion, 1);
    }

    /**
     * Converts the passed subVersion to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param subVersion
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public SubVersionDTO toDTO(SubVersion subVersion, int depth) {
        if (subVersion == null) {
            return null;
        }

        SubVersionDTO dto = new SubVersionDTO();

        dto.id = subVersion.getId();
        dto.name = subVersion.getName();
        dto.subProjectId = subVersion.getSubProjectId();
        dto.versionId = subVersion.getVersionId();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a SubVersion.
     * Convenient for query by example.
     */
    public SubVersion toEntity(SubVersionDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a SubVersion.
     * Convenient for query by example.
     */
    public SubVersion toEntity(SubVersionDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        SubVersion subVersion = new SubVersion();

        subVersion.setId(dto.id);
        subVersion.setName(dto.name);
        subVersion.setSubProjectId(dto.subProjectId);
        subVersion.setVersionId(dto.versionId);
        if (depth-- > 0) {
        }

        return subVersion;
    }
}