/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/domain/CompositePk.java.cpk.vm
 */
package com.apside.gismo.domain;

import static org.apache.commons.lang.StringUtils.isNotEmpty;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.Transient;
import javax.validation.constraints.Digits;
import javax.validation.constraints.NotNull;

import com.google.common.base.Objects;

@Embeddable

public class TaskLinkPk implements Comparable<TaskLinkPk>, Serializable {
    private static final long serialVersionUID = 1L;

    private Integer childTaskId;
    private Integer parentTaskId;

    public TaskLinkPk() {
    }

    public TaskLinkPk(Integer childTaskId, Integer parentTaskId) {
        this.childTaskId = childTaskId;
        this.parentTaskId = parentTaskId;
    }

    /**
     * Helper to determine if this composite primary key is fully set.
     */
    @Transient
    public boolean areFieldsSet() {
        return isChildTaskIdSet() && isParentTaskIdSet();
    }

    /**
     * Helper method to determine if this instance is considered empty, that is,
     * if all the non primary key columns are null.
     */
    @Transient
    public boolean isEmpty() {
        return !isChildTaskIdSet() && !isParentTaskIdSet();
    }

    //-- [childTaskId] ------------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "CHILD_TASK_ID", nullable = false, precision = 10)
    public Integer getChildTaskId() {
        return childTaskId;
    }

    public void setChildTaskId(Integer childTaskId) {
        this.childTaskId = childTaskId;
    }

    public TaskLinkPk childTaskId(Integer childTaskId) {
        setChildTaskId(childTaskId);
        return this;
    }

    /**
     * Helper that determines if this attribute is set or not.
     */
    @Transient
    public boolean isChildTaskIdSet() {
        return getChildTaskId() != null;
    }

    //-- [parentTaskId] ------------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "PARENT_TASK_ID", nullable = false, precision = 10)
    public Integer getParentTaskId() {
        return parentTaskId;
    }

    public void setParentTaskId(Integer parentTaskId) {
        this.parentTaskId = parentTaskId;
    }

    public TaskLinkPk parentTaskId(Integer parentTaskId) {
        setParentTaskId(parentTaskId);
        return this;
    }

    /**
     * Helper that determines if this attribute is set or not.
     */
    @Transient
    public boolean isParentTaskIdSet() {
        return getParentTaskId() != null;
    }

    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof TaskLinkPk && hashCode() == other.hashCode());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(getChildTaskId(), //
                getParentTaskId());
    }

    @Override
    public int compareTo(TaskLinkPk other) {
        return other == null ? -1 : hashCode() - other.hashCode();
    }

    /**
    * Return the string representation of the composite primary key, it should be reversable by version produced by the {@link #String()} method
    */
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        if (isChildTaskIdSet()) {
            result.append(getChildTaskId());
        }
        result.append("_");
        if (isParentTaskIdSet()) {
            result.append(getParentTaskId());
        }

        return result.toString();
    }

    /**
     * Build an instance from a string version produced by the {@link #toString()} method
     */
    public static TaskLinkPk fromString(String string) {
        TaskLinkPk result = new TaskLinkPk();
        String[] values = string.split("_");
        if (isNotEmpty(values[0])) {
            result.setChildTaskId(Integer.valueOf(values[0]));
        }
        if (isNotEmpty(values[1])) {
            result.setParentTaskId(Integer.valueOf(values[1]));
        }

        return result;
    }
}
