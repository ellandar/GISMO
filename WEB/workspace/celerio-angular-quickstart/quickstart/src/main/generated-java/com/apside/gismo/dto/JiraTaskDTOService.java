/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.apside.gismo.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.apside.gismo.domain.JiraTask;
import com.apside.gismo.domain.JiraTask_;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.JiraTaskRepository;

/**
 * A simple DTO Facility for JiraTask.
 */
@Service
public class JiraTaskDTOService {

    @Inject
    private JiraTaskRepository jiraTaskRepository;

    @Transactional(readOnly = true)
    public JiraTaskDTO findOne(Integer id) {
        return toDTO(jiraTaskRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<JiraTaskDTO> complete(String query, int maxResults) {
        List<JiraTask> results = jiraTaskRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<JiraTaskDTO> findAll(PageRequestByExample<JiraTaskDTO> req) {
        Example<JiraTask> example = null;
        JiraTask jiraTask = toEntity(req.example);

        if (jiraTask != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(JiraTask_.projectname.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.ident.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.issuetype.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.summary.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.severity.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.status.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.priority.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.assignee.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.reporter.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.components.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.linkedissue.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.affversion.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.targetversion.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.deliveryversion.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.state.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.warning.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTask_.error.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(jiraTask, matcher);
        }

        Page<JiraTask> page;
        if (example != null) {
            page = jiraTaskRepository.findAll(example, req.toPageable());
        } else {
            page = jiraTaskRepository.findAll(req.toPageable());
        }

        List<JiraTaskDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public JiraTaskDTO save(JiraTaskDTO dto) {
        if (dto == null) {
            return null;
        }

        final JiraTask jiraTask;

        if (dto.isIdSet()) {
            JiraTask jiraTaskTmp = jiraTaskRepository.findOne(dto.id);
            if (jiraTaskTmp != null) {
                jiraTask = jiraTaskTmp;
            } else {
                jiraTask = new JiraTask();
                jiraTask.setId(dto.id);
            }
        } else {
            jiraTask = new JiraTask();
        }

        jiraTask.setProjectname(dto.projectname);

        jiraTask.setIdent(dto.ident);

        jiraTask.setIssuetype(dto.issuetype);

        jiraTask.setSummary(dto.summary);

        jiraTask.setSeverity(dto.severity);

        jiraTask.setStatus(dto.status);

        jiraTask.setPriority(dto.priority);

        jiraTask.setAssignee(dto.assignee);

        jiraTask.setReporter(dto.reporter);

        jiraTask.setComponents(dto.components);

        jiraTask.setLinkedissue(dto.linkedissue);

        jiraTask.setAffversion(dto.affversion);

        jiraTask.setTargetversion(dto.targetversion);

        jiraTask.setDeliveryversion(dto.deliveryversion);

        jiraTask.setProjectId(dto.projectId);

        jiraTask.setVersionId(dto.versionId);

        jiraTask.setSubProjectId(dto.subProjectId);

        jiraTask.setSubVersionId(dto.subVersionId);

        jiraTask.setTaskTypeId(dto.taskTypeId);

        jiraTask.setTaskId(dto.taskId);

        jiraTask.setState(dto.state);

        jiraTask.setWarning(dto.warning);

        jiraTask.setError(dto.error);

        return toDTO(jiraTaskRepository.save(jiraTask));
    }

    /**
     * Converts the passed jiraTask to a DTO.
     */
    public JiraTaskDTO toDTO(JiraTask jiraTask) {
        return toDTO(jiraTask, 1);
    }

    /**
     * Converts the passed jiraTask to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param jiraTask
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public JiraTaskDTO toDTO(JiraTask jiraTask, int depth) {
        if (jiraTask == null) {
            return null;
        }

        JiraTaskDTO dto = new JiraTaskDTO();

        dto.id = jiraTask.getId();
        dto.projectname = jiraTask.getProjectname();
        dto.ident = jiraTask.getIdent();
        dto.issuetype = jiraTask.getIssuetype();
        dto.summary = jiraTask.getSummary();
        dto.severity = jiraTask.getSeverity();
        dto.status = jiraTask.getStatus();
        dto.priority = jiraTask.getPriority();
        dto.assignee = jiraTask.getAssignee();
        dto.reporter = jiraTask.getReporter();
        dto.components = jiraTask.getComponents();
        dto.linkedissue = jiraTask.getLinkedissue();
        dto.affversion = jiraTask.getAffversion();
        dto.targetversion = jiraTask.getTargetversion();
        dto.deliveryversion = jiraTask.getDeliveryversion();
        dto.projectId = jiraTask.getProjectId();
        dto.versionId = jiraTask.getVersionId();
        dto.subProjectId = jiraTask.getSubProjectId();
        dto.subVersionId = jiraTask.getSubVersionId();
        dto.taskTypeId = jiraTask.getTaskTypeId();
        dto.taskId = jiraTask.getTaskId();
        dto.state = jiraTask.getState();
        dto.warning = jiraTask.getWarning();
        dto.error = jiraTask.getError();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a JiraTask.
     * Convenient for query by example.
     */
    public JiraTask toEntity(JiraTaskDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a JiraTask.
     * Convenient for query by example.
     */
    public JiraTask toEntity(JiraTaskDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        JiraTask jiraTask = new JiraTask();

        jiraTask.setId(dto.id);
        jiraTask.setProjectname(dto.projectname);
        jiraTask.setIdent(dto.ident);
        jiraTask.setIssuetype(dto.issuetype);
        jiraTask.setSummary(dto.summary);
        jiraTask.setSeverity(dto.severity);
        jiraTask.setStatus(dto.status);
        jiraTask.setPriority(dto.priority);
        jiraTask.setAssignee(dto.assignee);
        jiraTask.setReporter(dto.reporter);
        jiraTask.setComponents(dto.components);
        jiraTask.setLinkedissue(dto.linkedissue);
        jiraTask.setAffversion(dto.affversion);
        jiraTask.setTargetversion(dto.targetversion);
        jiraTask.setDeliveryversion(dto.deliveryversion);
        jiraTask.setProjectId(dto.projectId);
        jiraTask.setVersionId(dto.versionId);
        jiraTask.setSubProjectId(dto.subProjectId);
        jiraTask.setSubVersionId(dto.subVersionId);
        jiraTask.setTaskTypeId(dto.taskTypeId);
        jiraTask.setTaskId(dto.taskId);
        jiraTask.setState(dto.state);
        jiraTask.setWarning(dto.warning);
        jiraTask.setError(dto.error);
        if (depth-- > 0) {
        }

        return jiraTask;
    }
}