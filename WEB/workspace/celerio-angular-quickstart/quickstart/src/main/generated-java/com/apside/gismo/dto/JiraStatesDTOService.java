/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.apside.gismo.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.apside.gismo.domain.JiraStates;
import com.apside.gismo.domain.JiraStates_;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.JiraStatesRepository;

/**
 * A simple DTO Facility for JiraStates.
 */
@Service
public class JiraStatesDTOService {

    @Inject
    private JiraStatesRepository jiraStatesRepository;

    @Transactional(readOnly = true)
    public JiraStatesDTO findOne(Integer id) {
        return toDTO(jiraStatesRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<JiraStatesDTO> complete(String query, int maxResults) {
        List<JiraStates> results = jiraStatesRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<JiraStatesDTO> findAll(PageRequestByExample<JiraStatesDTO> req) {
        Example<JiraStates> example = null;
        JiraStates jiraStates = toEntity(req.example);

        if (jiraStates != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(JiraStates_.gismoState.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraStates_.jiraState.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(jiraStates, matcher);
        }

        Page<JiraStates> page;
        if (example != null) {
            page = jiraStatesRepository.findAll(example, req.toPageable());
        } else {
            page = jiraStatesRepository.findAll(req.toPageable());
        }

        List<JiraStatesDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public JiraStatesDTO save(JiraStatesDTO dto) {
        if (dto == null) {
            return null;
        }

        final JiraStates jiraStates;

        if (dto.isIdSet()) {
            JiraStates jiraStatesTmp = jiraStatesRepository.findOne(dto.id);
            if (jiraStatesTmp != null) {
                jiraStates = jiraStatesTmp;
            } else {
                jiraStates = new JiraStates();
                jiraStates.setId(dto.id);
            }
        } else {
            jiraStates = new JiraStates();
        }

        jiraStates.setGismoState(dto.gismoState);

        jiraStates.setJiraState(dto.jiraState);

        return toDTO(jiraStatesRepository.save(jiraStates));
    }

    /**
     * Converts the passed jiraStates to a DTO.
     */
    public JiraStatesDTO toDTO(JiraStates jiraStates) {
        return toDTO(jiraStates, 1);
    }

    /**
     * Converts the passed jiraStates to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param jiraStates
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public JiraStatesDTO toDTO(JiraStates jiraStates, int depth) {
        if (jiraStates == null) {
            return null;
        }

        JiraStatesDTO dto = new JiraStatesDTO();

        dto.id = jiraStates.getId();
        dto.gismoState = jiraStates.getGismoState();
        dto.jiraState = jiraStates.getJiraState();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a JiraStates.
     * Convenient for query by example.
     */
    public JiraStates toEntity(JiraStatesDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a JiraStates.
     * Convenient for query by example.
     */
    public JiraStates toEntity(JiraStatesDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        JiraStates jiraStates = new JiraStates();

        jiraStates.setId(dto.id);
        jiraStates.setGismoState(dto.gismoState);
        jiraStates.setJiraState(dto.jiraState);
        if (depth-- > 0) {
        }

        return jiraStates;
    }
}