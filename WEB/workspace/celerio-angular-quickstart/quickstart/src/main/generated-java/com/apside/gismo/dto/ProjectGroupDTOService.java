/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.apside.gismo.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.apside.gismo.domain.ProjectGroup;
import com.apside.gismo.domain.ProjectGroup_;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.ProjectGroupRepository;

/**
 * A simple DTO Facility for ProjectGroup.
 */
@Service
public class ProjectGroupDTOService {

    @Inject
    private ProjectGroupRepository projectGroupRepository;

    @Transactional(readOnly = true)
    public ProjectGroupDTO findOne(Integer id) {
        return toDTO(projectGroupRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<ProjectGroupDTO> complete(String query, int maxResults) {
        List<ProjectGroup> results = projectGroupRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<ProjectGroupDTO> findAll(PageRequestByExample<ProjectGroupDTO> req) {
        Example<ProjectGroup> example = null;
        ProjectGroup projectGroup = toEntity(req.example);

        if (projectGroup != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(ProjectGroup_.name.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(projectGroup, matcher);
        }

        Page<ProjectGroup> page;
        if (example != null) {
            page = projectGroupRepository.findAll(example, req.toPageable());
        } else {
            page = projectGroupRepository.findAll(req.toPageable());
        }

        List<ProjectGroupDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public ProjectGroupDTO save(ProjectGroupDTO dto) {
        if (dto == null) {
            return null;
        }

        final ProjectGroup projectGroup;

        if (dto.isIdSet()) {
            ProjectGroup projectGroupTmp = projectGroupRepository.findOne(dto.id);
            if (projectGroupTmp != null) {
                projectGroup = projectGroupTmp;
            } else {
                projectGroup = new ProjectGroup();
                projectGroup.setId(dto.id);
            }
        } else {
            projectGroup = new ProjectGroup();
        }

        projectGroup.setName(dto.name);

        return toDTO(projectGroupRepository.save(projectGroup));
    }

    /**
     * Converts the passed projectGroup to a DTO.
     */
    public ProjectGroupDTO toDTO(ProjectGroup projectGroup) {
        return toDTO(projectGroup, 1);
    }

    /**
     * Converts the passed projectGroup to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param projectGroup
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public ProjectGroupDTO toDTO(ProjectGroup projectGroup, int depth) {
        if (projectGroup == null) {
            return null;
        }

        ProjectGroupDTO dto = new ProjectGroupDTO();

        dto.id = projectGroup.getId();
        dto.name = projectGroup.getName();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a ProjectGroup.
     * Convenient for query by example.
     */
    public ProjectGroup toEntity(ProjectGroupDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a ProjectGroup.
     * Convenient for query by example.
     */
    public ProjectGroup toEntity(ProjectGroupDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        ProjectGroup projectGroup = new ProjectGroup();

        projectGroup.setId(dto.id);
        projectGroup.setName(dto.name);
        if (depth-- > 0) {
        }

        return projectGroup;
    }
}