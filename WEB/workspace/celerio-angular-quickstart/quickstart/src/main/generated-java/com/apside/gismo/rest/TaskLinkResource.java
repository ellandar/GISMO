/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.apside.gismo.rest;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import java.beans.PropertyEditorSupport;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestBody;

import com.apside.gismo.domain.TaskLink;
import com.apside.gismo.domain.TaskLinkPk;
import com.apside.gismo.dto.TaskLinkDTO;
import com.apside.gismo.dto.TaskLinkDTOService;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.TaskLinkRepository;
import com.apside.gismo.rest.support.AutoCompleteQuery;

@RestController
@RequestMapping("/api/taskLinks")
public class TaskLinkResource {

    private final Logger log = LoggerFactory.getLogger(TaskLinkResource.class);

    @Inject
    private TaskLinkRepository taskLinkRepository;
    @Inject
    private TaskLinkDTOService taskLinkDTOService;

    @InitBinder
    public void initBinder(WebDataBinder binder) {
        binder.registerCustomEditor(TaskLinkPk.class, new PropertyEditorSupport() {
            @Override
            public String getAsText() {
                return getValue().toString();
            }

            @Override
            public void setAsText(String text) throws IllegalArgumentException {
                setValue(TaskLinkPk.fromString(text));
            }
        });
    }

    /**
     * Create a new TaskLink.
     */
    @RequestMapping(value = "/", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<TaskLinkDTO> create(@RequestBody TaskLinkDTO taskLinkDTO) throws URISyntaxException {

        log.debug("Create TaskLinkDTO : {}", taskLinkDTO);

        if (taskLinkDTO.isIdSet()) {
            return ResponseEntity.badRequest().header("Failure", "Cannot create TaskLink with existing ID").body(null);
        }

        TaskLinkDTO result = taskLinkDTOService.save(taskLinkDTO);

        return ResponseEntity.created(new URI("/api/taskLinks/" + result.id)).body(result);
    }

    /**
    * Find by id TaskLink.
    */
    @RequestMapping(value = "/{id}", method = GET, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<TaskLinkDTO> findById(@PathVariable TaskLinkPk id) throws URISyntaxException {

        log.debug("Find by id TaskLink : {}", id);

        return Optional.ofNullable(taskLinkDTOService.findOne(id)).map(taskLinkDTO -> new ResponseEntity<>(taskLinkDTO, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Update TaskLink.
     */
    @RequestMapping(value = "/", method = PUT, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<TaskLinkDTO> update(@RequestBody TaskLinkDTO taskLinkDTO) throws URISyntaxException {

        log.debug("Update TaskLinkDTO : {}", taskLinkDTO);

        if (!taskLinkDTO.isIdSet()) {
            return create(taskLinkDTO);
        }

        TaskLinkDTO result = taskLinkDTOService.save(taskLinkDTO);

        return ResponseEntity.ok().body(result);
    }

    /**
     * Find a Page of TaskLink using query by example.
     */
    @RequestMapping(value = "/page", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponse<TaskLinkDTO>> findAll(@RequestBody PageRequestByExample<TaskLinkDTO> prbe) throws URISyntaxException {
        PageResponse<TaskLinkDTO> pageResponse = taskLinkDTOService.findAll(prbe);
        return new ResponseEntity<>(pageResponse, new HttpHeaders(), HttpStatus.OK);
    }

    /**
    * Auto complete support.
    */
    @RequestMapping(value = "/complete", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<TaskLinkDTO>> complete(@RequestBody AutoCompleteQuery acq) throws URISyntaxException {

        List<TaskLinkDTO> results = taskLinkDTOService.complete(acq.query, acq.maxResults);

        return new ResponseEntity<>(results, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Delete by id TaskLink.
     */
    @RequestMapping(value = "/{id}", method = DELETE, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable TaskLinkPk id) throws URISyntaxException {

        log.debug("Delete by id TaskLink : {}", id);

        try {
            taskLinkRepository.delete(id);
            return ResponseEntity.ok().build();
        } catch (Exception x) {
            // todo: dig exception, most likely org.hibernate.exception.ConstraintViolationException
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
    }
}