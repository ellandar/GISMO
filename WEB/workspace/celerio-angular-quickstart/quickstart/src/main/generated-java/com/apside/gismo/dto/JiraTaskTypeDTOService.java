/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.apside.gismo.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.apside.gismo.domain.JiraTaskType;
import com.apside.gismo.domain.JiraTaskType_;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.JiraTaskTypeRepository;

/**
 * A simple DTO Facility for JiraTaskType.
 */
@Service
public class JiraTaskTypeDTOService {

    @Inject
    private JiraTaskTypeRepository jiraTaskTypeRepository;

    @Transactional(readOnly = true)
    public JiraTaskTypeDTO findOne(Integer id) {
        return toDTO(jiraTaskTypeRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<JiraTaskTypeDTO> complete(String query, int maxResults) {
        List<JiraTaskType> results = jiraTaskTypeRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<JiraTaskTypeDTO> findAll(PageRequestByExample<JiraTaskTypeDTO> req) {
        Example<JiraTaskType> example = null;
        JiraTaskType jiraTaskType = toEntity(req.example);

        if (jiraTaskType != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(JiraTaskType_.issuetype.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(JiraTaskType_.myComponent.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(jiraTaskType, matcher);
        }

        Page<JiraTaskType> page;
        if (example != null) {
            page = jiraTaskTypeRepository.findAll(example, req.toPageable());
        } else {
            page = jiraTaskTypeRepository.findAll(req.toPageable());
        }

        List<JiraTaskTypeDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public JiraTaskTypeDTO save(JiraTaskTypeDTO dto) {
        if (dto == null) {
            return null;
        }

        final JiraTaskType jiraTaskType;

        if (dto.isIdSet()) {
            JiraTaskType jiraTaskTypeTmp = jiraTaskTypeRepository.findOne(dto.id);
            if (jiraTaskTypeTmp != null) {
                jiraTaskType = jiraTaskTypeTmp;
            } else {
                jiraTaskType = new JiraTaskType();
                jiraTaskType.setId(dto.id);
            }
        } else {
            jiraTaskType = new JiraTaskType();
        }

        jiraTaskType.setIssuetype(dto.issuetype);

        jiraTaskType.setMyComponent(dto.myComponent);

        jiraTaskType.setTaskTypeId(dto.taskTypeId);

        return toDTO(jiraTaskTypeRepository.save(jiraTaskType));
    }

    /**
     * Converts the passed jiraTaskType to a DTO.
     */
    public JiraTaskTypeDTO toDTO(JiraTaskType jiraTaskType) {
        return toDTO(jiraTaskType, 1);
    }

    /**
     * Converts the passed jiraTaskType to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param jiraTaskType
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public JiraTaskTypeDTO toDTO(JiraTaskType jiraTaskType, int depth) {
        if (jiraTaskType == null) {
            return null;
        }

        JiraTaskTypeDTO dto = new JiraTaskTypeDTO();

        dto.id = jiraTaskType.getId();
        dto.issuetype = jiraTaskType.getIssuetype();
        dto.myComponent = jiraTaskType.getMyComponent();
        dto.taskTypeId = jiraTaskType.getTaskTypeId();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a JiraTaskType.
     * Convenient for query by example.
     */
    public JiraTaskType toEntity(JiraTaskTypeDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a JiraTaskType.
     * Convenient for query by example.
     */
    public JiraTaskType toEntity(JiraTaskTypeDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        JiraTaskType jiraTaskType = new JiraTaskType();

        jiraTaskType.setId(dto.id);
        jiraTaskType.setIssuetype(dto.issuetype);
        jiraTaskType.setMyComponent(dto.myComponent);
        jiraTaskType.setTaskTypeId(dto.taskTypeId);
        if (depth-- > 0) {
        }

        return jiraTaskType;
    }
}