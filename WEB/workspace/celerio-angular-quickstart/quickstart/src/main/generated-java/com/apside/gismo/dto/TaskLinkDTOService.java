/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.apside.gismo.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.apside.gismo.domain.TaskLink;
import com.apside.gismo.domain.TaskLinkPk;
import com.apside.gismo.domain.TaskLink_;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.TaskLinkRepository;

/**
 * A simple DTO Facility for TaskLink.
 */
@Service
public class TaskLinkDTOService {

    @Inject
    private TaskLinkRepository taskLinkRepository;

    @Transactional(readOnly = true)
    public TaskLinkDTO findOne(TaskLinkPk id) {
        return toDTO(taskLinkRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<TaskLinkDTO> complete(String query, int maxResults) {
        List<TaskLink> results = taskLinkRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<TaskLinkDTO> findAll(PageRequestByExample<TaskLinkDTO> req) {
        Example<TaskLink> example = null;
        TaskLink taskLink = toEntity(req.example);

        if (taskLink != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
            ;

            example = Example.of(taskLink, matcher);
        }

        Page<TaskLink> page;
        if (example != null) {
            page = taskLinkRepository.findAll(example, req.toPageable());
        } else {
            page = taskLinkRepository.findAll(req.toPageable());
        }

        List<TaskLinkDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public TaskLinkDTO save(TaskLinkDTO dto) {
        if (dto == null) {
            return null;
        }

        final TaskLink taskLink;

        if (dto.isIdSet()) {
            TaskLink taskLinkTmp = taskLinkRepository.findOne(dto.id);
            if (taskLinkTmp != null) {
                taskLink = taskLinkTmp;
            } else {
                taskLink = new TaskLink();
                taskLink.setId(dto.id);
            }
        } else {
            taskLink = new TaskLink();
        }

        return toDTO(taskLinkRepository.save(taskLink));
    }

    /**
     * Converts the passed taskLink to a DTO.
     */
    public TaskLinkDTO toDTO(TaskLink taskLink) {
        return toDTO(taskLink, 1);
    }

    /**
     * Converts the passed taskLink to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param taskLink
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public TaskLinkDTO toDTO(TaskLink taskLink, int depth) {
        if (taskLink == null) {
            return null;
        }

        TaskLinkDTO dto = new TaskLinkDTO();

        dto.id = taskLink.getId();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a TaskLink.
     * Convenient for query by example.
     */
    public TaskLink toEntity(TaskLinkDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a TaskLink.
     * Convenient for query by example.
     */
    public TaskLink toEntity(TaskLinkDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        TaskLink taskLink = new TaskLink();

        taskLink.setId(dto.id);
        if (depth-- > 0) {
        }

        return taskLink;
    }
}