/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.apside.gismo.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.apside.gismo.domain.SubProject;
import com.apside.gismo.domain.SubProject_;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.SubProjectRepository;

/**
 * A simple DTO Facility for SubProject.
 */
@Service
public class SubProjectDTOService {

    @Inject
    private SubProjectRepository subProjectRepository;

    @Transactional(readOnly = true)
    public SubProjectDTO findOne(Integer id) {
        return toDTO(subProjectRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<SubProjectDTO> complete(String query, int maxResults) {
        List<SubProject> results = subProjectRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<SubProjectDTO> findAll(PageRequestByExample<SubProjectDTO> req) {
        Example<SubProject> example = null;
        SubProject subProject = toEntity(req.example);

        if (subProject != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(SubProject_.name.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(subProject, matcher);
        }

        Page<SubProject> page;
        if (example != null) {
            page = subProjectRepository.findAll(example, req.toPageable());
        } else {
            page = subProjectRepository.findAll(req.toPageable());
        }

        List<SubProjectDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public SubProjectDTO save(SubProjectDTO dto) {
        if (dto == null) {
            return null;
        }

        final SubProject subProject;

        if (dto.isIdSet()) {
            SubProject subProjectTmp = subProjectRepository.findOne(dto.id);
            if (subProjectTmp != null) {
                subProject = subProjectTmp;
            } else {
                subProject = new SubProject();
                subProject.setId(dto.id);
            }
        } else {
            subProject = new SubProject();
        }

        subProject.setName(dto.name);

        subProject.setProjectId(dto.projectId);

        return toDTO(subProjectRepository.save(subProject));
    }

    /**
     * Converts the passed subProject to a DTO.
     */
    public SubProjectDTO toDTO(SubProject subProject) {
        return toDTO(subProject, 1);
    }

    /**
     * Converts the passed subProject to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param subProject
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public SubProjectDTO toDTO(SubProject subProject, int depth) {
        if (subProject == null) {
            return null;
        }

        SubProjectDTO dto = new SubProjectDTO();

        dto.id = subProject.getId();
        dto.name = subProject.getName();
        dto.projectId = subProject.getProjectId();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a SubProject.
     * Convenient for query by example.
     */
    public SubProject toEntity(SubProjectDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a SubProject.
     * Convenient for query by example.
     */
    public SubProject toEntity(SubProjectDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        SubProject subProject = new SubProject();

        subProject.setId(dto.id);
        subProject.setName(dto.name);
        subProject.setProjectId(dto.projectId);
        if (depth-- > 0) {
        }

        return subProject;
    }
}