/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.apside.gismo.rest;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestBody;

import com.apside.gismo.domain.CapitalSubtype;
import com.apside.gismo.dto.CapitalSubtypeDTO;
import com.apside.gismo.dto.CapitalSubtypeDTOService;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.CapitalSubtypeRepository;
import com.apside.gismo.rest.support.AutoCompleteQuery;

@RestController
@RequestMapping("/api/capitalSubtypes")
public class CapitalSubtypeResource {

    private final Logger log = LoggerFactory.getLogger(CapitalSubtypeResource.class);

    @Inject
    private CapitalSubtypeRepository capitalSubtypeRepository;
    @Inject
    private CapitalSubtypeDTOService capitalSubtypeDTOService;

    /**
     * Create a new CapitalSubtype.
     */
    @RequestMapping(value = "/", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CapitalSubtypeDTO> create(@RequestBody CapitalSubtypeDTO capitalSubtypeDTO) throws URISyntaxException {

        log.debug("Create CapitalSubtypeDTO : {}", capitalSubtypeDTO);

        if (capitalSubtypeDTO.isIdSet()) {
            return ResponseEntity.badRequest().header("Failure", "Cannot create CapitalSubtype with existing ID").body(null);
        }

        CapitalSubtypeDTO result = capitalSubtypeDTOService.save(capitalSubtypeDTO);

        return ResponseEntity.created(new URI("/api/capitalSubtypes/" + result.id)).body(result);
    }

    /**
    * Find by id CapitalSubtype.
    */
    @RequestMapping(value = "/{id}", method = GET, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CapitalSubtypeDTO> findById(@PathVariable Integer id) throws URISyntaxException {

        log.debug("Find by id CapitalSubtype : {}", id);

        return Optional.ofNullable(capitalSubtypeDTOService.findOne(id)).map(capitalSubtypeDTO -> new ResponseEntity<>(capitalSubtypeDTO, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Update CapitalSubtype.
     */
    @RequestMapping(value = "/", method = PUT, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<CapitalSubtypeDTO> update(@RequestBody CapitalSubtypeDTO capitalSubtypeDTO) throws URISyntaxException {

        log.debug("Update CapitalSubtypeDTO : {}", capitalSubtypeDTO);

        if (!capitalSubtypeDTO.isIdSet()) {
            return create(capitalSubtypeDTO);
        }

        CapitalSubtypeDTO result = capitalSubtypeDTOService.save(capitalSubtypeDTO);

        return ResponseEntity.ok().body(result);
    }

    /**
     * Find a Page of CapitalSubtype using query by example.
     */
    @RequestMapping(value = "/page", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponse<CapitalSubtypeDTO>> findAll(@RequestBody PageRequestByExample<CapitalSubtypeDTO> prbe) throws URISyntaxException {
        PageResponse<CapitalSubtypeDTO> pageResponse = capitalSubtypeDTOService.findAll(prbe);
        return new ResponseEntity<>(pageResponse, new HttpHeaders(), HttpStatus.OK);
    }

    /**
    * Auto complete support.
    */
    @RequestMapping(value = "/complete", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<CapitalSubtypeDTO>> complete(@RequestBody AutoCompleteQuery acq) throws URISyntaxException {

        List<CapitalSubtypeDTO> results = capitalSubtypeDTOService.complete(acq.query, acq.maxResults);

        return new ResponseEntity<>(results, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Delete by id CapitalSubtype.
     */
    @RequestMapping(value = "/{id}", method = DELETE, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable Integer id) throws URISyntaxException {

        log.debug("Delete by id CapitalSubtype : {}", id);

        try {
            capitalSubtypeRepository.delete(id);
            return ResponseEntity.ok().build();
        } catch (Exception x) {
            // todo: dig exception, most likely org.hibernate.exception.ConstraintViolationException
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
    }
}