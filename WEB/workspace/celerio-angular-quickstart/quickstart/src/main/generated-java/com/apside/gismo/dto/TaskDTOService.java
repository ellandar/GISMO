/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.apside.gismo.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.apside.gismo.domain.Task;
import com.apside.gismo.domain.Task_;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.TaskRepository;

/**
 * A simple DTO Facility for Task.
 */
@Service
public class TaskDTOService {

    @Inject
    private TaskRepository taskRepository;

    @Transactional(readOnly = true)
    public TaskDTO findOne(Integer id) {
        return toDTO(taskRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<TaskDTO> complete(String query, int maxResults) {
        List<Task> results = taskRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<TaskDTO> findAll(PageRequestByExample<TaskDTO> req) {
        Example<Task> example = null;
        Task task = toEntity(req.example);

        if (task != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(Task_.externalId.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Task_.name.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(task, matcher);
        }

        Page<Task> page;
        if (example != null) {
            page = taskRepository.findAll(example, req.toPageable());
        } else {
            page = taskRepository.findAll(req.toPageable());
        }

        List<TaskDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public TaskDTO save(TaskDTO dto) {
        if (dto == null) {
            return null;
        }

        final Task task;

        if (dto.isIdSet()) {
            Task taskTmp = taskRepository.findOne(dto.id);
            if (taskTmp != null) {
                task = taskTmp;
            } else {
                task = new Task();
                task.setId(dto.id);
            }
        } else {
            task = new Task();
        }

        task.setExternalId(dto.externalId);

        task.setName(dto.name);

        task.setTaskTypeId(dto.taskTypeId);

        task.setLevel(dto.level);

        task.setProjectId(dto.projectId);

        task.setVersionId(dto.versionId);

        task.setSubProjectId(dto.subProjectId);

        task.setSubVersionId(dto.subVersionId);

        task.setState(dto.state);

        task.setConsumedtime(dto.consumedtime);

        task.setPreviewtime(dto.previewtime);

        task.setRemaintime(dto.remaintime);

        task.setIsguarantee(dto.isguarantee);

        return toDTO(taskRepository.save(task));
    }

    /**
     * Converts the passed task to a DTO.
     */
    public TaskDTO toDTO(Task task) {
        return toDTO(task, 1);
    }

    /**
     * Converts the passed task to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param task
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public TaskDTO toDTO(Task task, int depth) {
        if (task == null) {
            return null;
        }

        TaskDTO dto = new TaskDTO();

        dto.id = task.getId();
        dto.externalId = task.getExternalId();
        dto.name = task.getName();
        dto.taskTypeId = task.getTaskTypeId();
        dto.level = task.getLevel();
        dto.projectId = task.getProjectId();
        dto.versionId = task.getVersionId();
        dto.subProjectId = task.getSubProjectId();
        dto.subVersionId = task.getSubVersionId();
        dto.state = task.getState();
        dto.consumedtime = task.getConsumedtime();
        dto.previewtime = task.getPreviewtime();
        dto.remaintime = task.getRemaintime();
        dto.isguarantee = task.getIsguarantee();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Task.
     * Convenient for query by example.
     */
    public Task toEntity(TaskDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Task.
     * Convenient for query by example.
     */
    public Task toEntity(TaskDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Task task = new Task();

        task.setId(dto.id);
        task.setExternalId(dto.externalId);
        task.setName(dto.name);
        task.setTaskTypeId(dto.taskTypeId);
        task.setLevel(dto.level);
        task.setProjectId(dto.projectId);
        task.setVersionId(dto.versionId);
        task.setSubProjectId(dto.subProjectId);
        task.setSubVersionId(dto.subVersionId);
        task.setState(dto.state);
        task.setConsumedtime(dto.consumedtime);
        task.setPreviewtime(dto.previewtime);
        task.setRemaintime(dto.remaintime);
        task.setIsguarantee(dto.isguarantee);
        if (depth-- > 0) {
        }

        return task;
    }
}