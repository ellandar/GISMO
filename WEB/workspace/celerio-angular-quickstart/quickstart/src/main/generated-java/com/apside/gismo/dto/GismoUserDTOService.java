/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.apside.gismo.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.apside.gismo.domain.GismoUser;
import com.apside.gismo.domain.GismoUser_;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.GismoUserRepository;

/**
 * A simple DTO Facility for GismoUser.
 */
@Service
public class GismoUserDTOService {

    @Inject
    private GismoUserRepository gismoUserRepository;

    @Transactional(readOnly = true)
    public GismoUserDTO findOne(Integer id) {
        return toDTO(gismoUserRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<GismoUserDTO> complete(String query, int maxResults) {
        List<GismoUser> results = gismoUserRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<GismoUserDTO> findAll(PageRequestByExample<GismoUserDTO> req) {
        Example<GismoUser> example = null;
        GismoUser gismoUser = toEntity(req.example);

        if (gismoUser != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(GismoUser_.name.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(GismoUser_.trigramme.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(GismoUser_.capitalName.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(GismoUser_.jiraName.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(gismoUser, matcher);
        }

        Page<GismoUser> page;
        if (example != null) {
            page = gismoUserRepository.findAll(example, req.toPageable());
        } else {
            page = gismoUserRepository.findAll(req.toPageable());
        }

        List<GismoUserDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public GismoUserDTO save(GismoUserDTO dto) {
        if (dto == null) {
            return null;
        }

        final GismoUser gismoUser;

        if (dto.isIdSet()) {
            GismoUser gismoUserTmp = gismoUserRepository.findOne(dto.id);
            if (gismoUserTmp != null) {
                gismoUser = gismoUserTmp;
            } else {
                gismoUser = new GismoUser();
                gismoUser.setId(dto.id);
            }
        } else {
            gismoUser = new GismoUser();
        }

        gismoUser.setName(dto.name);

        gismoUser.setTrigramme(dto.trigramme);

        gismoUser.setCapitalName(dto.capitalName);

        gismoUser.setJiraName(dto.jiraName);

        return toDTO(gismoUserRepository.save(gismoUser));
    }

    /**
     * Converts the passed gismoUser to a DTO.
     */
    public GismoUserDTO toDTO(GismoUser gismoUser) {
        return toDTO(gismoUser, 1);
    }

    /**
     * Converts the passed gismoUser to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param gismoUser
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public GismoUserDTO toDTO(GismoUser gismoUser, int depth) {
        if (gismoUser == null) {
            return null;
        }

        GismoUserDTO dto = new GismoUserDTO();

        dto.id = gismoUser.getId();
        dto.name = gismoUser.getName();
        dto.trigramme = gismoUser.getTrigramme();
        dto.capitalName = gismoUser.getCapitalName();
        dto.jiraName = gismoUser.getJiraName();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a GismoUser.
     * Convenient for query by example.
     */
    public GismoUser toEntity(GismoUserDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a GismoUser.
     * Convenient for query by example.
     */
    public GismoUser toEntity(GismoUserDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        GismoUser gismoUser = new GismoUser();

        gismoUser.setId(dto.id);
        gismoUser.setName(dto.name);
        gismoUser.setTrigramme(dto.trigramme);
        gismoUser.setCapitalName(dto.capitalName);
        gismoUser.setJiraName(dto.jiraName);
        if (depth-- > 0) {
        }

        return gismoUser;
    }
}