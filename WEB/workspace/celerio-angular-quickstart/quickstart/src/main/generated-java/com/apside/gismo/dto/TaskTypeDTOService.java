/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.apside.gismo.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.apside.gismo.domain.TaskType;
import com.apside.gismo.domain.TaskType_;
import com.apside.gismo.dto.support.PageRequestByExample;
import com.apside.gismo.dto.support.PageResponse;
import com.apside.gismo.repository.TaskTypeRepository;

/**
 * A simple DTO Facility for TaskType.
 */
@Service
public class TaskTypeDTOService {

    @Inject
    private TaskTypeRepository taskTypeRepository;

    @Transactional(readOnly = true)
    public TaskTypeDTO findOne(Integer id) {
        return toDTO(taskTypeRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<TaskTypeDTO> complete(String query, int maxResults) {
        List<TaskType> results = taskTypeRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<TaskTypeDTO> findAll(PageRequestByExample<TaskTypeDTO> req) {
        Example<TaskType> example = null;
        TaskType taskType = toEntity(req.example);

        if (taskType != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(TaskType_.name.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(taskType, matcher);
        }

        Page<TaskType> page;
        if (example != null) {
            page = taskTypeRepository.findAll(example, req.toPageable());
        } else {
            page = taskTypeRepository.findAll(req.toPageable());
        }

        List<TaskTypeDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public TaskTypeDTO save(TaskTypeDTO dto) {
        if (dto == null) {
            return null;
        }

        final TaskType taskType;

        if (dto.isIdSet()) {
            TaskType taskTypeTmp = taskTypeRepository.findOne(dto.id);
            if (taskTypeTmp != null) {
                taskType = taskTypeTmp;
            } else {
                taskType = new TaskType();
                taskType.setId(dto.id);
            }
        } else {
            taskType = new TaskType();
        }

        taskType.setName(dto.name);

        taskType.setType(dto.type);

        taskType.setProjectId(dto.projectId);

        taskType.setDefaultTaskId(dto.defaultTaskId);

        return toDTO(taskTypeRepository.save(taskType));
    }

    /**
     * Converts the passed taskType to a DTO.
     */
    public TaskTypeDTO toDTO(TaskType taskType) {
        return toDTO(taskType, 1);
    }

    /**
     * Converts the passed taskType to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param taskType
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public TaskTypeDTO toDTO(TaskType taskType, int depth) {
        if (taskType == null) {
            return null;
        }

        TaskTypeDTO dto = new TaskTypeDTO();

        dto.id = taskType.getId();
        dto.name = taskType.getName();
        dto.type = taskType.getType();
        dto.projectId = taskType.getProjectId();
        dto.defaultTaskId = taskType.getDefaultTaskId();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a TaskType.
     * Convenient for query by example.
     */
    public TaskType toEntity(TaskTypeDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a TaskType.
     * Convenient for query by example.
     */
    public TaskType toEntity(TaskTypeDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        TaskType taskType = new TaskType();

        taskType.setId(dto.id);
        taskType.setName(dto.name);
        taskType.setType(dto.type);
        taskType.setProjectId(dto.projectId);
        taskType.setDefaultTaskId(dto.defaultTaskId);
        if (depth-- > 0) {
        }

        return taskType;
    }
}